@page "/"
@using PasswordGenerate.DataModels
@using PaswordGenerate.DataModels
@using PaswordGenerate.Web.Services
@using System.Timers;
@inject IPasswordServices _passwordServices

<h3>Generare parola</h3>
<EditForm Model="@user">
 <DataAnnotationsValidator />
 <ValidationSummary />
        Introduceti id-ul user-ului si data!
 <hr/>  
        <div class = "form-field">            
           @*<EditForm Model="UserId">*@
               <label> Id-ul userului: </label>
                <input id ="userId" type="number" class = "form-text" @bind-value="user.UserId" />  
                <ValidationMessage For="() => user.UserId" />
            @*</EditForm>            *@
        </div>
 <br/> 
         <div class = "form-field">                              
            @*<EditForm Model="DateTimeUser">*@
                <label> Data: </label>  
                <InputDate id= "dateTimeUser" class="form-text" @bind-Value="user.DateTimeUser"></InputDate>
            @*</EditForm> *@
        </div>
 <hr/> 
</EditForm> 

  <div class = "form-field">
        <p role="status">Parola generata: @password</p>
        <label> Valabilitate: </label>
        <span style ="color:red; font-weight:700">@dateTimeValue.ToString()</span>
        <label> secunde </label>
        <br />
        <span style ="color:red; font-weight:700">@validPassword</span>
 </div>

<hr/>
    <button class="btn btn-primary" @onclick="PasswordGenerate">Genereaza parola</button>

    <button class="btn btn-primary" @onclick="CheckPassword">Testeaza parola</button>

@code{

    private Timer timer;
    private int dateTimeValue = 0;    
    private string  password = string.Empty;
    private PasswordResponse passwordResponse; 
    private string validPassword = string.Empty;
    private int isValidPassword;
    private User user = new User { DateTimeUser = DateTime.Now, UserId=0};
            

    /// <summary>
    /// generate password and set timer
    /// </summary>
    /// <returns></returns>
    private async Task PasswordGenerate()
    {
        validPassword = string.Empty;
        dateTimeValue = 30;

        passwordResponse= new PasswordResponse();        
      
        //passwordResponse = await _passwordServices.GetPasswordResponses(UserId);
        passwordResponse = await _passwordServices.PasswordGenerate(user);
        password = passwordResponse.Password;

        //Timer Countdown
        timer = new Timer();
        timer.Interval = 1000;
        timer.Elapsed += OnTimeElapsed;
        timer.Enabled = true;
    }

    /// <summary>
    /// show seconds countdown 
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void OnTimeElapsed(object sender, ElapsedEventArgs e)
    {
        if(dateTimeValue > 0){  
            dateTimeValue = dateTimeValue - 1;
            InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }
        else
        {
            timer.Enabled = false;            
            validPassword = string.Empty;
            dateTimeValue = 0;
            InvokeAsync(() =>
                {
                    StateHasChanged();
                });
        }       
    }
    
    /// <summary>
    /// check if password is expired
    /// </summary>
    /// <returns></returns>
    private async Task CheckPassword()
    {   
        isValidPassword =  await _passwordServices.CheckPassword(password);

        if (isValidPassword > 0)
        {
            validPassword = "parola valida!";
        }
        else
        {
            validPassword = "parola expirata!";
        }
    }
   
}